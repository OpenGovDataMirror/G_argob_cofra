<?php

namespace Magyp\RendicionDeCajaBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * ComprobanteRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ComprobanteRepository extends EntityRepository
{
	public function buscarActivos($idrendicion){
		
		$qb = $this->createQueryBuilder('comp')
				->select('comp', 'ren')
				->join("comp.rendicion", "ren")
                                ->join("comp.imputacion","imp")
				->where("ren.id = :id")
				->setParameter("id", $idrendicion)
				->andWhere("comp.borrado <> 1")
				//->orderBy("comp.imputacion")
				->orderBy("imp.codigo")
                ;


		return $qb->getQuery()->getResult();
		;
	}
    
    public function tieneActivos($idrendicion){
		
		$qb = $this->createQueryBuilder('comp')
				->select('count(comp.id)')
				->join("comp.rendicion", "ren")
                ->join("comp.imputacion","imp")
				->where("ren.id = :id")
				->setParameter("id", $idrendicion)
				->andWhere("comp.borrado <> 1")
                ;
        $res= $qb->getQuery()->getResult();
        return $res[0][1] == 0;
	}
    
    public function buscarActivosOrdenadosPorImputacion($idrendicion){
		
		$qb = $this->createQueryBuilder('comp')
				->select('comp', 'ren')
				->join("comp.rendicion", "ren")
                                ->join("comp.imputacion","imp")
				->where("ren.id = :id")
				->setParameter("id", $idrendicion)
				->andWhere("comp.borrado <> 1")
                ->orderBy("imp.tipo, imp.codigo, comp.fecha")
                ;
                
		return $qb->getQuery()->getResult();
		;
	}
    
    public function buscarActivosAlmuerzos($idrendicion){
		$aimpu= array ("2.1.1", "3.9.9");
		$qb = $this->createQueryBuilder('comp')
				->select('comp', 'ren')
				->join("comp.rendicion", "ren")
                ->join("comp.imputacion", "imp")
				->where("ren.id = :id")
				->setParameter("id", $idrendicion)
                ->andWhere("imp.codigo IN (:impus) ")
                ->setParameter("impus", $aimpu)
				->andWhere("comp.borrado <> 1")
                ->orderBy("imp.tipo, imp.codigo, comp.fecha")
                ;

		return $qb->getQuery()->getResult();
		;
	}
    
	public function buscarBorrados($idrendicion){
		
		$qb = $this->createQueryBuilder('comp')
				->select('comp', 'ren')
				->join("comp.rendicion", "ren")
				->where("ren.id = :id")
				->setParameter("id", $idrendicion)
				->andWhere("comp.borrado = 1");
				
		return $qb->getQuery()->getResult();
		;
	}
	
	public function buscarBorradosOrdenados($idrendicion){
		// hacer join contra eventocomprobante desde aca.
		$qb = $this->createQueryBuilder('comp')
				->select('comp',"ren","max(EC.fecha)","count(EC)")
				->join("comp.eventocomprobantes", "EC")
				->join("comp.rendicion", "ren")
				->where("ren.id = :id")
				->setParameter("id", $idrendicion)
				->andWhere("comp.borrado = 1")
				// puede ser q sirva pero no me ordena los eventocomprobantes dentro de comprobante. Ej, comprobante->eventocomprobantes el array no se si esta ordenado o no
				
				->groupBy("comp.id")
				->orderBy('EC.fecha','DESC')
				;
				
		return $qb->getQuery()->getResult();
		;
	}
    
    /*Devuelve true en caso de que la imputacion y el numero de comprobante NO esten repetidos*/
    public function esValidoImputacionYNumeroComprobante($idrendicion, $numero, $imputacion, $idcomprobante ){

		$qb = $this->createQueryBuilder('comp')
				->select('comp.id', 'count(comp.id)')
				->join("comp.rendicion", "ren")
				->where("ren.id = :id")
				->setParameter("id", $idrendicion)
				->andWhere("comp.borrado <> 1")
                ->andWhere("comp.numero = :num")
                ->setParameter("num", "$numero")
                ->andWhere("comp.imputacion = :imp")
                ->setParameter("imp", $imputacion)
                ;
        $result= $qb->getQuery()->getSingleResult();
        
                return true;
        
		return ( $result['id'] == $idcomprobante ) || (  $result[1] == 0  );
	}
    
    /*Devuelve true en caso en el que la suma de los comprobantes que se relacionen con el proveedor mas la suma del actual sea menor a 3000*/
    /*caso 0 = create, caso 1 = edit*/
    public function esValidoLimite3000ProveedorRendicion($idrendicion, $idproveedor, $numero, $importe, $idcomprobante, $caso ){
        $k= 3000;
        $qb= $this->createQueryBuilder('comp')
            ->select('SUM(comp.importe)')
            ->join("comp.rendicion", "ren")
            ->where("ren.id = :id")
            ->setParameter("id", $idrendicion)
            ->andWhere("comp.borrado <> 1")
            ->andWhere("comp.proveedor = :prov")
            ->setParameter("prov", $idproveedor)
            ->andWhere("comp.numero = :num")
            ->setParameter("num", "$numero");
        switch ($caso){
            case 0:
            break;
            case 1:
                $qb= $qb
                ->andWhere("comp.id != :comp")
                ->setParameter("comp", $idcomprobante)
                ;
            break;
        }
        $result= $qb->getQuery()->getSingleResult();
		return ( ( $result[1] + $importe ) <= $k  );
	}
    
    /*Devuelve la fecha minima y maxima de los comprobantes de una rendicion*/
    public function fechaMinMaxdeRendicion($idrendicion ){
        $qb= $this->createQueryBuilder('comp')
            ->select('comp.fecha')
            ->join("comp.rendicion", "ren")
            ->where("ren.id = :id")
            ->setParameter("id", $idrendicion)
            ->andWhere("comp.borrado <> 1")
            ->orderBy('comp.fecha')
                ;
        $result= $qb->getQuery()->getResult();

		return array( 'min'=> $result[0]['fecha'], 'max' => $result[count($result)-1]['fecha']);;
	}
    
 
    public function sumatoriaActivos($idrendicion){
		
		$qb = $this->createQueryBuilder('comp')
				->select('SUM(comp.importe)')
				->join("comp.rendicion", "ren")
				->where("ren.id = :id")
				->setParameter("id", $idrendicion)
				->andWhere("comp.borrado <> 1")
                ;

		return $qb->getQuery()->getArrayResult();
		;
	}
    
    /*retorna el liostado la suma de los comprobantes con mismo numero de imputacion*/
     public function buscarActivosOrdenadosPorImputacionConSubTotal($idrendicion){
		
		$qb = $this->createQueryBuilder('comp')
				->select('SUM(comp.importe)', 'imp.id')
				->join("comp.rendicion", "ren")
                ->join("comp.imputacion", "imp")
				->where("ren.id = :id")
				->setParameter("id", $idrendicion)
				->andWhere("comp.borrado <> 1")
                ->groupBy("comp.imputacion")
                ->orderBy("comp.imputacion")
                ;
		return $qb->getQuery()->getResult();
		;
	}
    
        /*Devuelve true en caso en el que la suma de los comprobantes que se relacionen con el proveedor mas la suma del actual sea menor a 3000*/
        /*caso 0 = create, caso 1 = edit*/
        public function esValidoLimiteMontoArea( $idrendicion, $montolimite, $importe, $idcomprobante, $caso ){
            $qb= $this->createQueryBuilder('comp')
                ->select('SUM(comp.importe)')
                ->join("comp.rendicion", "ren")
                ->where("ren.id = :id")
                ->setParameter("id", $idrendicion)
                ->andWhere("comp.borrado <> 1");
            switch ($caso){
                case 0:
                break;
                case 1:
                    $qb= $qb
                    ->andWhere("comp.id != :comp")
                    ->setParameter("comp", $idcomprobante)
                    ;
                break;
            }
            $result= $qb->getQuery()->getSingleResult();
                    return ( ( $result[1] + $importe ) <= $montolimite  );
        }
        
    /*Devuelve true en caso de que el proveedor y el numero de comprobante NO esten repetidos*/
        /*siempre y cuando la imputaciones sean distintas*/
    /*caso 0 = create, caso 1 = edit*/
    public function noRepiteNumeroProveedor( $numero, $proveedor, $idcomprobante, $idimputacion, $caso ){

        $qb = $this->createQueryBuilder('comp')
                        ->select('count(comp.id)')
                        ->where("comp.numero = :num")
                        ->setParameter("num", "$numero")
                        ->andWhere("comp.proveedor = :prov")
                        ->setParameter("prov", $proveedor)
                        ->andWhere("comp.imputacion = :imp")
                        ->setParameter("imp", $idimputacion)
                        ->andWhere("comp.borrado <> 1")
        ;
        switch ($caso){
            case 0:
            break;
            case 1:
                $qb= $qb
                ->andWhere("comp.id != :comp")
                ->setParameter("comp", $idcomprobante)
                ;
            break;
        }
        $result= $qb->getQuery()->getSingleResult();
        return ( $result[1] == 0 );
    }
            
            
            
    
    public function rendicionDisintaConMismoNumeroProveedor( $idrendicion, $numero, $idproveedor, $idcomprobante, $caso ){
        $qb = $this->createQueryBuilder('comp')
                        ->select('count(comp.id)')
                        ->where("comp.numero = :num")
                        ->setParameter("num", "$numero")
                        ->andWhere("comp.proveedor = :prov")
                        ->setParameter("prov", $idproveedor)
                        ->andWhere("comp.rendicion != :ren")
                        ->setParameter("ren", $idrendicion)
                        ->andWhere("comp.borrado <> 1")
        ;
        switch ($caso){
            case 0:
            break;
            case 1:
                $qb= $qb
                ->andWhere("comp.id != :comp")
                ->setParameter("comp", $idcomprobante)
                ;
            break;
        }
        $result= $qb->getQuery()->getSingleResult();
        return ( $result[1] == 0 );
    }
    
    
}
